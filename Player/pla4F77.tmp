[gd_scene load_steps=5 format=3 uid="uid://pjwsorepbum0"]

[sub_resource type="GDScript" id="GDScript_nbx6h"]
script/source = "extends CharacterBody3D

@export var speed := 8.0
@export var jump_vel := 5.0
@export var distance_footsteps := 0.0
@export var play_footstep := 2
@export var sprint_multiplier := 1.75
@export var lerp_val := 0.2
@export var mouse_sense := 0.15
@export var cam_bob_speed := 10
@export var cam_bob_up_down := 1
@export var breathe_speed := 0.5
@export var breathe_in_out := 0.1
@export var push_force := 80.0

var direction := Vector3.ZERO
var _delta := 0.0
var is_running = false
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

@onready var pivot = $Pivot
@onready var camera_3d = $Camera3D
@onready var orig_cam_pos = camera_3d.position
@onready var interact_rc = $Camera3D/InteractRC
@onready var floor_detect_rc = $FloorDetectRC
@onready var footstep_player = $FootstepPlayer

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _process(delta):
	if Input.is_action_just_pressed(\"run\"):
		is_running = true
	if Input.is_action_just_released(\"run\"):
		is_running = false
	process_interact_raycast()

func _physics_process(delta):
	if floor_detect_rc.is_colliding():
		var group = floor_detect_rc.get_collider().get_parent().get_groups()[0]
		process_ground_sounds(group)
	apply_gravity(delta)
	move(delta)

func apply_gravity(delta):
	if not is_on_floor():
		velocity.y -= gravity * delta

func jump():
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = jump_vel

func move(delta):
	jump()
	var y_rotation = global_transform.basis.get_euler().y
	var cam_bob
	var obj_cam
	_delta += delta
	direction.x = Input.get_action_strength(\"rightward\") - Input.get_action_strength(\"leftward\")
	direction.z = Input.get_action_strength(\"backward\") - Input.get_action_strength(\"forward\")
	direction = direction.rotated(Vector3.UP, y_rotation).normalized()
	
	var actual_speed = speed * sprint_multiplier if is_running else speed
	
	if direction:
		velocity.x = direction.x * actual_speed
		velocity.z = direction.z * actual_speed
	else:
		velocity.x = lerp(velocity.x, 0.0, lerp_val)
		velocity.z = lerp(velocity.z, 0.0, lerp_val)
	if direction != Vector3.ZERO:
		pivot.rotation.y = lerp_angle(pivot.rotation.y, atan2(-velocity.x, -velocity.z), lerp_val)
		cam_bob = floor(abs(direction.z) + abs(direction.x)) * _delta * cam_bob_speed
		obj_cam = orig_cam_pos + Vector3.UP * sin(cam_bob) * cam_bob_up_down
	else:
		cam_bob = floor(abs(1) + abs(1)) * _delta * breathe_speed
		obj_cam = orig_cam_pos + Vector3.UP * sin(cam_bob) * cam_bob_up_down * breathe_in_out
	camera_3d.position = camera_3d.position.lerp(obj_cam, delta)
	move_and_slide()
	
	for i in get_slide_collision_count():
		var c = get_slide_collision(i)
		if c.get_collider() is RigidBody3D:
			c.get_collider().apply_central_impulse(-c.get_normal() * push_force)

func process_interact_raycast():
	var interacted = interact_rc.get_collider()
	if Input.is_action_just_pressed(\"interact\"):
		if interacted != null and \\
		interacted.is_in_group(\"Interactable\") and \\
		interacted.has_method(\"action_use\"):
			interacted.action_use()

func process_ground_sounds(group: String):
	if play_footstep != 100 and (int(velocity.x) != 0 or int(velocity.z) !=0):
		distance_footsteps += 0.1
	
	play_footstep = 1 if is_running else 2.0
		
	if distance_footsteps > play_footstep and is_on_floor():
		match group:
			\"WoodTerrain\":
				footstep_player.stream = load(\"res://Assets/footsteps/wood/1.ogg\")
			\"MetalTerrain\":
				footstep_player.stream = load(\"res://Assets/footsteps/metal/1.ogg\")
			\"GrassTerrain\":
				footstep_player.stream = load(\"res://Assets/footsteps/grass/1.ogg\")
			null:
				footstep_player.stream = load(\"res://Assets/footsteps/wood/1.ogg\")
		footstep_player.pitch_scale = randf_range(0.8, 1.2)
		footstep_player.play()
		distance_footsteps = 0.0

func _input(event):
	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(-event.relative.x * mouse_sense))
		camera_3d.rotate_x(deg_to_rad(-event.relative.y * mouse_sense))
		camera_3d.rotation.x = clamp(camera_3d.rotation.x, deg_to_rad(-89), deg_to_rad(89))
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_i8irb"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_xpt0j"]

[sub_resource type="AudioStream" id="AudioStream_jg5xj"]

[node name="Player" type="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
collision_layer = 0
collision_mask = 0
script = SubResource("GDScript_nbx6h")

[node name="Pivot" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)

[node name="Body" type="MeshInstance3D" parent="Pivot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_i8irb")
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_xpt0j")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="InteractRC" type="RayCast3D" parent="Camera3D"]
target_position = Vector3(0, 0, -3)
collision_mask = 13
collide_with_areas = true

[node name="FloorDetectRC" type="RayCast3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.00051, 0)
collision_mask = 7

[node name="FootstepPlayer" type="AudioStreamPlayer3D" parent="."]
stream = SubResource("AudioStream_jg5xj")
max_db = 2.0
